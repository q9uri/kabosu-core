#!/usr/bin/env python3
import dataclasses
import pathlib
import typing
import unittest
from unittest.mock import MagicMock, Mock, patch

import numpy
import torch

from kabosu_core import bunkai
import kabosu_core.bunkai.algorithm.lbd.predict
from kabosu_core.bunkai.algorithm.bunkai_sbd.annotator import MorphAnnotatorJanome
from kabosu_core.bunkai.base.annotation import Annotations, SpanAnnotation
from kabosu_core.bunkai.constant import METACHAR_LINE_BREAK
from kabosu_core.bunkai.third.utils_ner import InputFeatures


@dataclasses.dataclass
class ReturnObject(object):
    predictions: typing.Union[numpy.ndarray, typing.Tuple[numpy.ndarray, typing.Any]]
    label_ids: numpy.ndarray
    metrics: typing.Dict[str, float]
    labels: typing.List[str]
    label_map: typing.Dict[int, str]
    tokenizer: typing.List[typing.List[str]]
    subwords_lengths: typing.List[typing.List[int]]
    dataset_content: typing.List[InputFeatures]
    subword_tokens: typing.List[str]
    model_type: str

    def to_prediction_tuple(self):
        return self.predictions, self.label_ids, self.metrics


@dataclasses.dataclass
class NewlineTestCase(object):
    text: str
    return_value: ReturnObject


@dataclasses.dataclass
class DummyBcObject(object):
    max_seq_length = 352


class DummyJanomeSubwordsTokenizer(object):
    subword_tokenizer_type = "wordpiece"
    do_subword_tokenize: bool = True
    never_split = None
    unk_token = "[UNK]"
    sep_token = "[SEP]"
    pad_token = "[PAD]"
    cls_token = "[CLS]"
    mask_token = "[MASK]"


def func_generate_dummy_bert_prediction() -> ReturnObject:
    input_ids = numpy.array(
        [
            [
                -100,
                0,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                0,
                0,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
            ]
        ]
    )

    bert_prediction_dummy = ReturnObject(
        predictions=numpy.array(
            [
                [
                    [6.2508187, -4.232818, -2.757059],
                    [6.1650567, -3.9524226, -2.8288684],
                    [5.8380218, -3.6578689, -2.6578376],
                    [6.572264, -3.9870892, -2.8709047],
                    [6.4894476, -3.9268737, -2.9671426],
                    [6.216006, -3.7496064, -2.699235],
                    [6.154592, -3.768798, -2.9045649],
                    [6.713662, -4.110723, -3.033975],
                    [6.4546986, -4.302385, -2.8338246],
                    [6.654306, -4.3293185, -2.6386347],
                    [6.471306, -4.2099767, -2.675298],
                    [6.5739822, -4.2123647, -2.610855],
                    [6.56117, -4.2072744, -2.7977717],
                    [5.5703177, -3.9187171, -2.5862396],
                    [-1.884768, 4.4782224, -1.8186623],
                    [5.8886337, -3.8386352, -2.851794],
                    [6.1382294, -4.0328712, -2.8980045],
                    [5.56992, -3.6112833, -2.725328],
                    [6.1413136, -4.0054746, -3.0763247],
                    [5.949703, -3.7203593, -2.748416],
                    [6.490921, -4.10034, -2.882184],
                    [6.5604143, -4.187022, -2.7890666],
                    [6.594881, -4.082993, -2.8291895],
                    [6.5816226, -4.3966985, -2.8815534],
                    [6.4179454, -4.2702456, -2.9540753],
                    [5.451252, -3.8440175, -2.5752163],
                    [5.04419, -3.9542036, -2.1646724],
                    [3.4635344, -1.968563, -2.199682],
                    [4.8015337, -2.961069, -2.4906867],
                    [5.642599, -3.646186, -2.6289954],
                    [5.2767353, -3.545886, -2.642362],
                    [5.0331793, -3.3589022, -2.6159847],
                    [5.4294004, -3.643956, -2.6506023],
                    [4.5621023, -3.094194, -2.4944196],
                    [4.1612453, -2.6053162, -2.4269052],
                    [5.314385, -3.575482, -2.6072056],
                    [5.7357044, -3.812284, -2.5930557],
                    [5.507862, -3.702612, -2.5583594],
                    [4.6684365, -3.2131882, -2.445125],
                    [3.5338802, -2.0267015, -2.207005],
                    [5.7340727, -3.7640634, -2.584625],
                    [5.6197987, -3.716104, -2.5262532],
                    [5.47165, -3.8265584, -2.683898],
                    [5.622836, -3.8941417, -2.4897096],
                    [5.7662735, -3.5816152, -2.5766578],
                    [6.1038303, -3.778536, -2.5087128],
                    [5.8932824, -3.5206861, -2.5480444],
                    [5.9496975, -3.6596575, -2.7018757],
                    [5.80085, -3.8926811, -2.7254941],
                    [5.2340307, -3.5927713, -2.7278686],
                    [5.1017323, -3.3140123, -2.598034],
                    [5.8979063, -3.754191, -2.4886804],
                    [6.0222745, -3.7422712, -2.5321903],
                    [6.018483, -3.754891, -2.6665978],
                    [5.704626, -3.542376, -2.654388],
                    [4.6625023, -2.9835098, -2.541861],
                    [5.851006, -3.9127822, -2.657012],
                    [5.7435713, -3.8231273, -2.593646],
                    [5.4913816, -3.65688, -2.581519],
                    [5.5846696, -3.8045363, -2.5105321],
                    [5.7596455, -3.856001, -2.5696197],
                    [5.2555804, -3.6392345, -2.5121176],
                    [3.876574, -2.5438776, -2.222461],
                    [3.7917795, -2.0205114, -2.2313485],
                    [5.4242163, -3.5941799, -2.5328736],
                    [5.375439, -3.5381823, -2.5158625],
                    [5.4592915, -3.702542, -2.6168754],
                    [5.560192, -3.833506, -2.513876],
                    [5.6088414, -3.6553125, -2.5693743],
                    [5.9053307, -3.8074007, -2.5359588],
                    [5.9091473, -3.8741407, -2.577005],
                    [5.8823833, -3.9749475, -2.7565668],
                    [5.6488376, -3.8580503, -2.6887958],
                    [5.2936573, -3.6095896, -2.6221497],
                    [4.391178, -2.9584074, -2.444511],
                    [3.6910276, -2.122798, -2.2480416],
                    [4.749332, -3.0014434, -2.4438312],
                    [5.4725676, -3.572462, -2.5331836],
                    [5.383877, -3.459734, -2.5013256],
                    [4.7639284, -3.1252341, -2.3972554],
                    [3.0694826, -1.5774779, -2.004921],
                    [4.904317, -3.1489391, -2.5000887],
                    [5.3118916, -3.5204654, -2.4224253],
                    [5.180787, -3.576025, -2.5785341],
                    [5.114481, -3.4627273, -2.5771754],
                    [5.3889327, -3.5888848, -2.5031228],
                    [5.6680975, -3.6847317, -2.5290437],
                    [5.138223, -3.5371237, -2.4942274],
                    [4.500623, -3.0357556, -2.3804736],
                    [4.391722, -2.5864615, -2.312683],
                    [5.499447, -3.6149004, -2.4913578],
                    [5.5458784, -3.731234, -2.5449672],
                    [5.3306437, -3.7202172, -2.6340237],
                    [5.555006, -3.902042, -2.5700445],
                    [5.5402975, -3.5568285, -2.5195646],
                    [5.923624, -3.8101199, -2.5412364],
                    [5.966515, -3.813748, -2.5135388],
                    [5.8475056, -3.5183058, -2.591],
                    [6.0184994, -3.9749384, -2.7445848],
                    [5.477597, -3.7229378, -2.662457],
                    [5.360407, -3.6949844, -2.6515026],
                    [5.664912, -3.8135028, -2.5601358],
                    [5.4726477, -3.3598118, -2.4900548],
                    [5.716467, -3.51123, -2.4441009],
                    [5.9715557, -3.444706, -2.381342],
                    [5.684905, -3.407822, -2.4511132],
                    [5.652356, -3.5395107, -2.566182],
                    [6.086296, -4.0143557, -2.757162],
                    [5.93272, -3.913489, -2.8516464],
                    [5.513011, -3.4940288, -2.4365187],
                    [5.847448, -3.7215633, -2.3947792],
                    [5.8946314, -3.8241282, -2.54148],
                    [5.750376, -3.7425175, -2.5400023],
                    [4.2657037, -2.7419717, -2.2960308],
                    [2.803505, -1.1151873, -2.0724204],
                    [5.069028, -3.2909331, -2.334376],
                    [5.1803617, -3.453929, -2.5205479],
                    [5.4511433, -3.702659, -2.574565],
                    [5.3047314, -3.4712682, -2.4875286],
                    [5.6509314, -3.7447715, -2.5951982],
                    [4.6699295, -3.1814604, -2.428188],
                    [3.7801378, -2.4215903, -2.232263],
                    [5.882105, -3.9000041, -2.7211075],
                    [5.4890738, -3.6392746, -2.5046637],
                    [5.5276957, -3.803844, -2.6643615],
                    [5.5274057, -3.8214302, -2.472117],
                    [5.697824, -3.462097, -2.537269],
                    [5.957882, -3.4408717, -2.3871222],
                    [5.7239294, -3.427033, -2.4772236],
                    [5.7963157, -3.564792, -2.6691947],
                    [6.039237, -3.963026, -2.7902536],
                    [5.920341, -4.0087867, -2.9042587],
                    [5.5651474, -3.5472107, -2.4891918],
                    [5.8184776, -3.666483, -2.4670477],
                    [5.9809966, -3.7833667, -2.6582336],
                    [5.647328, -3.433617, -2.5941267],
                    [5.5610843, -3.4891434, -2.6713898],
                    [5.927872, -3.8813362, -2.7214065],
                    [5.785965, -3.7625728, -2.7681732],
                    [5.5795455, -3.5510294, -2.4824677],
                    [5.658676, -3.582807, -2.3650568],
                    [5.5469546, -3.691554, -2.5050597],
                    [4.9479814, -3.3915858, -2.4030986],
                    [2.3329203, -1.131766, -1.8485751],
                    [4.9787626, -3.2024384, -2.483747],
                    [4.911786, -3.1755145, -2.3659158],
                    [5.1218967, -3.4676068, -2.5503993],
                    [5.3810396, -3.6829956, -2.4702733],
                    [5.547564, -3.4910274, -2.545243],
                    [5.7789097, -3.722993, -2.4507918],
                    [5.970089, -3.8823137, -2.4802265],
                    [5.9492865, -4.123867, -2.6572356],
                    [5.6568136, -3.8770761, -2.729714],
                    [4.3428807, -2.8855278, -2.3944554],
                    [3.3280978, -1.8396173, -2.1001978],
                    [4.402819, -2.6880207, -2.3907475],
                    [5.33469, -3.4014668, -2.4767218],
                    [5.344347, -3.4569607, -2.5946865],
                    [5.16568, -3.5411572, -2.5953364],
                    [4.793007, -3.216085, -2.473689],
                    [4.2960186, -2.7347312, -2.3489754],
                    [3.805702, -2.1488824, -2.2282677],
                    [4.8418455, -3.0454865, -2.429937],
                    [5.323112, -3.394518, -2.4346614],
                    [5.0180244, -3.275909, -2.4122648],
                    [2.9661903, -1.4233906, -1.8672131],
                    [4.931182, -3.1389503, -2.4102225],
                    [4.9693556, -3.3392224, -2.3979883],
                    [4.7797327, -3.1475272, -2.4123082],
                    [4.9508667, -3.3479035, -2.4246244],
                    [5.3461943, -3.5120308, -2.403717],
                    [4.7816477, -3.1765049, -2.3775845],
                    [3.5539727, -2.0844865, -2.1079192],
                    [4.6387863, -2.7948396, -2.327755],
                    [5.2454753, -3.5064278, -2.4758189],
                    [5.34525, -3.6765518, -2.5685573],
                    [5.3302755, -3.6907237, -2.3332164],
                    [5.5514193, -3.3656187, -2.4497824],
                    [5.9280806, -3.4156218, -2.3316245],
                    [5.6186748, -3.4095483, -2.409141],
                    [5.5813913, -3.4803317, -2.5405798],
                    [6.018386, -4.0123005, -2.7944303],
                    [5.791168, -3.8674788, -2.84371],
                    [5.5173597, -3.5319824, -2.486122],
                    [5.699461, -3.6407382, -2.38972],
                    [5.5982647, -3.7332854, -2.5377173],
                    [5.2531133, -3.6009998, -2.52218],
                    [3.1787467, -1.9656836, -2.093604],
                    [4.40965, -2.5246685, -2.265173],
                    [4.986265, -3.2378364, -2.3466463],
                    [5.221637, -3.5330796, -2.599038],
                    [5.4330263, -3.6381497, -2.5219502],
                    [5.4239407, -3.537006, -2.494265],
                    [5.7460465, -3.6373107, -2.4902682],
                    [5.8602858, -3.7709167, -2.4536014],
                    [6.177119, -4.1630287, -2.6641548],
                    [6.007184, -4.1391425, -2.7746332],
                    [5.234189, -3.6090078, -2.6703088],
                    [4.458186, -2.7931972, -2.487601],
                    [5.560937, -3.7051048, -2.4895868],
                    [5.6427107, -3.4239001, -2.5180545],
                    [5.985802, -3.4383836, -2.3521647],
                    [5.705908, -3.4290183, -2.4250975],
                    [5.633841, -3.4536667, -2.5365653],
                    [6.068409, -4.0221148, -2.7998438],
                    [5.9640284, -3.9706354, -2.9187305],
                    [5.5351458, -3.5053978, -2.4735668],
                    [5.819968, -3.7009068, -2.4335914],
                    [5.7983685, -3.7754993, -2.5713015],
                    [5.6510377, -3.7154012, -2.5723357],
                    [3.1107492, -1.7932931, -2.038206],
                    [4.6108003, -2.809266, -2.3758132],
                    [5.129378, -3.334814, -2.3553529],
                    [5.27525, -3.511778, -2.542399],
                    [5.553991, -3.7560308, -2.5243082],
                    [5.502201, -3.4396672, -2.5307422],
                    [5.932541, -3.7612128, -2.6955643],
                    [5.511362, -3.666332, -2.6930692],
                    [5.7192364, -3.4919772, -2.5201082],
                    [5.9494834, -3.9199066, -2.8064528],
                    [5.989796, -4.028501, -2.9356284],
                    [5.6844234, -3.7073665, -2.6559854],
                    [5.7420044, -3.6841903, -2.4219987],
                    [6.019269, -3.851921, -2.5968761],
                    [6.012556, -3.7651906, -2.7302198],
                    [5.22493, -3.475544, -2.7187457],
                    [3.7751057, -2.2496824, -2.357636],
                    [5.0919046, -3.3189614, -2.3565404],
                    [5.065481, -3.4329944, -2.5660634],
                    [5.425741, -3.6887774, -2.519134],
                    [5.4049864, -3.6632752, -2.5491867],
                    [5.7636952, -3.6867075, -2.525423],
                    [5.069643, -3.6292334, -2.5354824],
                    [4.145218, -2.7678344, -2.3718739],
                    [5.6274185, -3.743704, -2.6409373],
                    [5.338847, -3.5374503, -2.5367274],
                    [5.486684, -3.7471037, -2.6338878],
                    [5.5501976, -3.8444057, -2.492587],
                    [5.680416, -3.5932336, -2.565421],
                    [5.806082, -3.7560775, -2.4588132],
                    [6.016405, -3.9916434, -2.5753489],
                    [5.8762383, -4.095117, -2.6915278],
                    [5.441005, -3.7025, -2.6978788],
                    [3.8021955, -2.3089309, -2.2744963],
                    [3.295628, -1.7485684, -2.1460679],
                    [3.8095417, -2.1189125, -2.2619543],
                    [5.4892044, -3.5187688, -2.5719445],
                    [5.4801655, -3.616661, -2.614462],
                    [4.9412575, -3.1965845, -2.5532193],
                    [5.1379337, -3.4174705, -2.5731788],
                    [4.9215374, -3.290681, -2.5169702],
                    [4.978571, -3.3317158, -2.5741048],
                    [5.4809895, -3.7299604, -2.5985618],
                    [5.4321156, -3.5919714, -2.5068498],
                    [4.9712186, -3.3998384, -2.4638414],
                    [3.131559, -1.8154464, -2.0161948],
                    [4.20892, -2.32469, -2.24137],
                    [5.3603983, -3.5648031, -2.6062012],
                    [4.770118, -3.3103986, -2.570477],
                    [4.701253, -3.1281867, -2.5695343],
                    [5.692337, -3.640839, -2.4616065],
                    [5.45103, -3.6451797, -2.5184312],
                    [5.107309, -3.4940763, -2.478231],
                    [2.6783373, -1.4480876, -1.8975571],
                    [5.1807585, -3.3610148, -2.513155],
                    [5.0343246, -3.2504637, -2.3884437],
                    [5.273611, -3.5527153, -2.5969102],
                    [5.4621787, -3.6608934, -2.5238476],
                    [5.4608717, -3.5109582, -2.4960275],
                    [5.82248, -3.7629507, -2.517388],
                    [5.7347484, -3.8859196, -2.5711641],
                    [6.112766, -4.150079, -2.6801968],
                    [5.705344, -3.8973122, -2.7257922],
                    [4.6984296, -3.2733493, -2.5083308],
                    [4.3192806, -2.8144884, -2.431129],
                    [3.3805945, -1.8914232, -2.134581],
                    [5.3352375, -3.2841783, -2.4582448],
                    [5.7989273, -3.6409295, -2.5358305],
                    [5.648154, -3.3823075, -2.5451796],
                    [5.525385, -3.6856186, -2.5623384],
                    [5.047093, -3.3972507, -2.5808408],
                    [4.6922903, -3.1120577, -2.520347],
                    [4.454125, -2.7146144, -2.4370828],
                    [5.8160934, -3.7015703, -2.4822454],
                    [5.842537, -3.7719693, -2.5903497],
                    [5.584236, -3.6224103, -2.578228],
                    [4.6949444, -3.0575066, -2.4430642],
                    [3.7849636, -2.0093102, -2.2221537],
                    [5.34052, -3.4516811, -2.3648925],
                    [5.4426284, -3.7016723, -2.6079993],
                    [5.575471, -3.8038383, -2.6187627],
                    [5.374604, -3.4713042, -2.472371],
                    [5.573716, -3.7265248, -2.549485],
                    [4.758337, -3.2580361, -2.4734373],
                    [3.182425, -1.8679427, -2.1192076],
                    [5.5819745, -3.679071, -2.5723608],
                    [5.2793016, -3.4560566, -2.421187],
                    [5.5433426, -3.7827773, -2.6599064],
                    [5.5916505, -3.8679109, -2.5255156],
                    [5.497374, -3.498955, -2.525767],
                    [5.8535748, -3.5889792, -2.5111132],
                    [5.98721, -3.4372945, -2.3722787],
                    [5.8036013, -3.5048394, -2.530361],
                    [5.953143, -3.8283353, -2.7150617],
                    [6.1119184, -4.0932183, -2.832982],
                    [5.959545, -4.0726967, -2.8936415],
                    [5.6262956, -3.5740123, -2.5001867],
                    [5.802416, -3.625824, -2.6191945],
                    [6.1741114, -3.677545, -2.5701354],
                    [6.019506, -3.5576932, -2.555736],
                    [5.670724, -3.441112, -2.5689387],
                    [5.865163, -3.8021712, -2.7791395],
                    [6.131137, -4.057909, -2.8261504],
                    [5.7952104, -3.6973677, -2.644189],
                    [5.7676497, -3.6922674, -2.5299058],
                    [5.883764, -3.8301828, -2.5025594],
                    [5.574148, -3.6859841, -2.5446942],
                    [4.5494995, -3.0782628, -2.4074235],
                    [2.3880472, -1.2455968, -1.9546468],
                    [5.3021474, -3.4626734, -2.5357323],
                ]
            ],
            dtype=numpy.float32,
        ),
        label_ids=input_ids,
        metrics={"eval_loss": 3.2364680767059326},
        labels=["O", "LB_SEP", "LB_NS"],
        label_map={0: "O", 1: "LB_SEP", 2: "LB_NS"},
        tokenizer=[
            [
                "ラウンジ",
                "も",
                "気軽",
                "に",
                "利用",
                "でき",
                "、",
                "申し分",
                "ない",
                "です",
                "。",
                "▁",
                "ホテル",
                "内",
                "の",
                "部屋",
                "も",
                "ゆったり",
                "でき",
                "まし",
                "た",
                "。",
            ]
        ],
        subwords_lengths=[[1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1]],
        subword_tokens=[
            "[CLS]",
            "ラウンジ",
            "も",
            "気",
            "##軽",
            "に",
            "利用",
            "でき",
            "、",
            "申し",
            "##分",
            "ない",
            "です",
            "。",
            "▁",
            "ホテル",
            "内",
            "の",
            "部屋",
            "も",
            "ゆ",
            "##ったり",
            "でき",
            "まし",
            "た",
            "。",
            "[SEP]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
        ],
        dataset_content=[
            InputFeatures(
                input_ids=[
                    2,
                    25018,
                    28,
                    704,
                    29505,
                    7,
                    666,
                    203,
                    6,
                    4482,
                    28593,
                    80,
                    2992,
                    8,
                    1,
                    3228,
                    186,
                    5,
                    3250,
                    28,
                    1223,
                    21087,
                    203,
                    3913,
                    10,
                    8,
                    3,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                ],
                label_ids=list(input_ids.tolist()),
                attention_mask=[],
                token_type_ids=[],
                document_id="0-1",
            )
        ],
        model_type="bert",
    )
    return bert_prediction_dummy


def func_generate_dummy_distil_bert_prediction() -> ReturnObject:
    input_ids = numpy.array(
        [
            [
                -100,
                0,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                0,
                0,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
                -100,
            ]
        ]
    )
    dummy_object = ReturnObject(
        predictions=numpy.array(
            [
                [
                    [6.2508187, -4.232818, -2.757059],
                    [6.1650567, -3.9524226, -2.8288684],
                    [5.8380218, -3.6578689, -2.6578376],
                    [6.572264, -3.9870892, -2.8709047],
                    [6.4894476, -3.9268737, -2.9671426],
                    [6.216006, -3.7496064, -2.699235],
                    [6.154592, -3.768798, -2.9045649],
                    [6.713662, -4.110723, -3.033975],
                    [6.4546986, -4.302385, -2.8338246],
                    [6.654306, -4.3293185, -2.6386347],
                    [6.471306, -4.2099767, -2.675298],
                    [6.5739822, -4.2123647, -2.610855],
                    [6.56117, -4.2072744, -2.7977717],
                    [5.5703177, -3.9187171, -2.5862396],
                    [-1.884768, 4.4782224, -1.8186623],
                    [5.8886337, -3.8386352, -2.851794],
                    [6.1382294, -4.0328712, -2.8980045],
                    [5.56992, -3.6112833, -2.725328],
                    [6.1413136, -4.0054746, -3.0763247],
                    [5.949703, -3.7203593, -2.748416],
                    [6.490921, -4.10034, -2.882184],
                    [6.5604143, -4.187022, -2.7890666],
                    [6.594881, -4.082993, -2.8291895],
                    [6.5816226, -4.3966985, -2.8815534],
                    [6.4179454, -4.2702456, -2.9540753],
                    [5.451252, -3.8440175, -2.5752163],
                    [5.04419, -3.9542036, -2.1646724],
                    [3.4635344, -1.968563, -2.199682],
                    [4.8015337, -2.961069, -2.4906867],
                    [5.642599, -3.646186, -2.6289954],
                    [5.2767353, -3.545886, -2.642362],
                    [5.0331793, -3.3589022, -2.6159847],
                    [5.4294004, -3.643956, -2.6506023],
                    [4.5621023, -3.094194, -2.4944196],
                    [4.1612453, -2.6053162, -2.4269052],
                    [5.314385, -3.575482, -2.6072056],
                    [5.7357044, -3.812284, -2.5930557],
                    [5.507862, -3.702612, -2.5583594],
                    [4.6684365, -3.2131882, -2.445125],
                    [3.5338802, -2.0267015, -2.207005],
                    [5.7340727, -3.7640634, -2.584625],
                    [5.6197987, -3.716104, -2.5262532],
                    [5.47165, -3.8265584, -2.683898],
                    [5.622836, -3.8941417, -2.4897096],
                    [5.7662735, -3.5816152, -2.5766578],
                    [6.1038303, -3.778536, -2.5087128],
                    [5.8932824, -3.5206861, -2.5480444],
                    [5.9496975, -3.6596575, -2.7018757],
                    [5.80085, -3.8926811, -2.7254941],
                    [5.2340307, -3.5927713, -2.7278686],
                    [5.1017323, -3.3140123, -2.598034],
                    [5.8979063, -3.754191, -2.4886804],
                    [6.0222745, -3.7422712, -2.5321903],
                    [6.018483, -3.754891, -2.6665978],
                    [5.704626, -3.542376, -2.654388],
                    [4.6625023, -2.9835098, -2.541861],
                    [5.851006, -3.9127822, -2.657012],
                    [5.7435713, -3.8231273, -2.593646],
                    [5.4913816, -3.65688, -2.581519],
                    [5.5846696, -3.8045363, -2.5105321],
                    [5.7596455, -3.856001, -2.5696197],
                    [5.2555804, -3.6392345, -2.5121176],
                    [3.876574, -2.5438776, -2.222461],
                    [3.7917795, -2.0205114, -2.2313485],
                    [5.4242163, -3.5941799, -2.5328736],
                    [5.375439, -3.5381823, -2.5158625],
                    [5.4592915, -3.702542, -2.6168754],
                    [5.560192, -3.833506, -2.513876],
                    [5.6088414, -3.6553125, -2.5693743],
                    [5.9053307, -3.8074007, -2.5359588],
                    [5.9091473, -3.8741407, -2.577005],
                    [5.8823833, -3.9749475, -2.7565668],
                    [5.6488376, -3.8580503, -2.6887958],
                    [5.2936573, -3.6095896, -2.6221497],
                    [4.391178, -2.9584074, -2.444511],
                    [3.6910276, -2.122798, -2.2480416],
                    [4.749332, -3.0014434, -2.4438312],
                    [5.4725676, -3.572462, -2.5331836],
                    [5.383877, -3.459734, -2.5013256],
                    [4.7639284, -3.1252341, -2.3972554],
                    [3.0694826, -1.5774779, -2.004921],
                    [4.904317, -3.1489391, -2.5000887],
                    [5.3118916, -3.5204654, -2.4224253],
                    [5.180787, -3.576025, -2.5785341],
                    [5.114481, -3.4627273, -2.5771754],
                    [5.3889327, -3.5888848, -2.5031228],
                    [5.6680975, -3.6847317, -2.5290437],
                    [5.138223, -3.5371237, -2.4942274],
                    [4.500623, -3.0357556, -2.3804736],
                    [4.391722, -2.5864615, -2.312683],
                    [5.499447, -3.6149004, -2.4913578],
                    [5.5458784, -3.731234, -2.5449672],
                    [5.3306437, -3.7202172, -2.6340237],
                    [5.555006, -3.902042, -2.5700445],
                    [5.5402975, -3.5568285, -2.5195646],
                    [5.923624, -3.8101199, -2.5412364],
                    [5.966515, -3.813748, -2.5135388],
                    [5.8475056, -3.5183058, -2.591],
                    [6.0184994, -3.9749384, -2.7445848],
                    [5.477597, -3.7229378, -2.662457],
                    [5.360407, -3.6949844, -2.6515026],
                    [5.664912, -3.8135028, -2.5601358],
                    [5.4726477, -3.3598118, -2.4900548],
                    [5.716467, -3.51123, -2.4441009],
                    [5.9715557, -3.444706, -2.381342],
                    [5.684905, -3.407822, -2.4511132],
                    [5.652356, -3.5395107, -2.566182],
                    [6.086296, -4.0143557, -2.757162],
                    [5.93272, -3.913489, -2.8516464],
                    [5.513011, -3.4940288, -2.4365187],
                    [5.847448, -3.7215633, -2.3947792],
                    [5.8946314, -3.8241282, -2.54148],
                    [5.750376, -3.7425175, -2.5400023],
                    [4.2657037, -2.7419717, -2.2960308],
                    [2.803505, -1.1151873, -2.0724204],
                    [5.069028, -3.2909331, -2.334376],
                    [5.1803617, -3.453929, -2.5205479],
                    [5.4511433, -3.702659, -2.574565],
                    [5.3047314, -3.4712682, -2.4875286],
                    [5.6509314, -3.7447715, -2.5951982],
                    [4.6699295, -3.1814604, -2.428188],
                    [3.7801378, -2.4215903, -2.232263],
                    [5.882105, -3.9000041, -2.7211075],
                    [5.4890738, -3.6392746, -2.5046637],
                    [5.5276957, -3.803844, -2.6643615],
                    [5.5274057, -3.8214302, -2.472117],
                    [5.697824, -3.462097, -2.537269],
                    [5.957882, -3.4408717, -2.3871222],
                    [5.7239294, -3.427033, -2.4772236],
                    [5.7963157, -3.564792, -2.6691947],
                    [6.039237, -3.963026, -2.7902536],
                    [5.920341, -4.0087867, -2.9042587],
                    [5.5651474, -3.5472107, -2.4891918],
                    [5.8184776, -3.666483, -2.4670477],
                    [5.9809966, -3.7833667, -2.6582336],
                    [5.647328, -3.433617, -2.5941267],
                    [5.5610843, -3.4891434, -2.6713898],
                    [5.927872, -3.8813362, -2.7214065],
                    [5.785965, -3.7625728, -2.7681732],
                    [5.5795455, -3.5510294, -2.4824677],
                    [5.658676, -3.582807, -2.3650568],
                    [5.5469546, -3.691554, -2.5050597],
                    [4.9479814, -3.3915858, -2.4030986],
                    [2.3329203, -1.131766, -1.8485751],
                    [4.9787626, -3.2024384, -2.483747],
                    [4.911786, -3.1755145, -2.3659158],
                    [5.1218967, -3.4676068, -2.5503993],
                    [5.3810396, -3.6829956, -2.4702733],
                    [5.547564, -3.4910274, -2.545243],
                    [5.7789097, -3.722993, -2.4507918],
                    [5.970089, -3.8823137, -2.4802265],
                    [5.9492865, -4.123867, -2.6572356],
                    [5.6568136, -3.8770761, -2.729714],
                    [4.3428807, -2.8855278, -2.3944554],
                    [3.3280978, -1.8396173, -2.1001978],
                    [4.402819, -2.6880207, -2.3907475],
                    [5.33469, -3.4014668, -2.4767218],
                    [5.344347, -3.4569607, -2.5946865],
                    [5.16568, -3.5411572, -2.5953364],
                    [4.793007, -3.216085, -2.473689],
                    [4.2960186, -2.7347312, -2.3489754],
                    [3.805702, -2.1488824, -2.2282677],
                    [4.8418455, -3.0454865, -2.429937],
                    [5.323112, -3.394518, -2.4346614],
                    [5.0180244, -3.275909, -2.4122648],
                    [2.9661903, -1.4233906, -1.8672131],
                    [4.931182, -3.1389503, -2.4102225],
                    [4.9693556, -3.3392224, -2.3979883],
                    [4.7797327, -3.1475272, -2.4123082],
                    [4.9508667, -3.3479035, -2.4246244],
                    [5.3461943, -3.5120308, -2.403717],
                    [4.7816477, -3.1765049, -2.3775845],
                    [3.5539727, -2.0844865, -2.1079192],
                    [4.6387863, -2.7948396, -2.327755],
                    [5.2454753, -3.5064278, -2.4758189],
                    [5.34525, -3.6765518, -2.5685573],
                    [5.3302755, -3.6907237, -2.3332164],
                    [5.5514193, -3.3656187, -2.4497824],
                    [5.9280806, -3.4156218, -2.3316245],
                    [5.6186748, -3.4095483, -2.409141],
                    [5.5813913, -3.4803317, -2.5405798],
                    [6.018386, -4.0123005, -2.7944303],
                    [5.791168, -3.8674788, -2.84371],
                    [5.5173597, -3.5319824, -2.486122],
                    [5.699461, -3.6407382, -2.38972],
                    [5.5982647, -3.7332854, -2.5377173],
                    [5.2531133, -3.6009998, -2.52218],
                    [3.1787467, -1.9656836, -2.093604],
                    [4.40965, -2.5246685, -2.265173],
                    [4.986265, -3.2378364, -2.3466463],
                    [5.221637, -3.5330796, -2.599038],
                    [5.4330263, -3.6381497, -2.5219502],
                    [5.4239407, -3.537006, -2.494265],
                    [5.7460465, -3.6373107, -2.4902682],
                    [5.8602858, -3.7709167, -2.4536014],
                    [6.177119, -4.1630287, -2.6641548],
                    [6.007184, -4.1391425, -2.7746332],
                    [5.234189, -3.6090078, -2.6703088],
                    [4.458186, -2.7931972, -2.487601],
                    [5.560937, -3.7051048, -2.4895868],
                    [5.6427107, -3.4239001, -2.5180545],
                    [5.985802, -3.4383836, -2.3521647],
                    [5.705908, -3.4290183, -2.4250975],
                    [5.633841, -3.4536667, -2.5365653],
                    [6.068409, -4.0221148, -2.7998438],
                    [5.9640284, -3.9706354, -2.9187305],
                    [5.5351458, -3.5053978, -2.4735668],
                    [5.819968, -3.7009068, -2.4335914],
                    [5.7983685, -3.7754993, -2.5713015],
                    [5.6510377, -3.7154012, -2.5723357],
                    [3.1107492, -1.7932931, -2.038206],
                    [4.6108003, -2.809266, -2.3758132],
                    [5.129378, -3.334814, -2.3553529],
                    [5.27525, -3.511778, -2.542399],
                    [5.553991, -3.7560308, -2.5243082],
                    [5.502201, -3.4396672, -2.5307422],
                    [5.932541, -3.7612128, -2.6955643],
                    [5.511362, -3.666332, -2.6930692],
                    [5.7192364, -3.4919772, -2.5201082],
                    [5.9494834, -3.9199066, -2.8064528],
                    [5.989796, -4.028501, -2.9356284],
                    [5.6844234, -3.7073665, -2.6559854],
                    [5.7420044, -3.6841903, -2.4219987],
                    [6.019269, -3.851921, -2.5968761],
                    [6.012556, -3.7651906, -2.7302198],
                    [5.22493, -3.475544, -2.7187457],
                    [3.7751057, -2.2496824, -2.357636],
                    [5.0919046, -3.3189614, -2.3565404],
                    [5.065481, -3.4329944, -2.5660634],
                    [5.425741, -3.6887774, -2.519134],
                    [5.4049864, -3.6632752, -2.5491867],
                    [5.7636952, -3.6867075, -2.525423],
                    [5.069643, -3.6292334, -2.5354824],
                    [4.145218, -2.7678344, -2.3718739],
                    [5.6274185, -3.743704, -2.6409373],
                    [5.338847, -3.5374503, -2.5367274],
                    [5.486684, -3.7471037, -2.6338878],
                    [5.5501976, -3.8444057, -2.492587],
                    [5.680416, -3.5932336, -2.565421],
                    [5.806082, -3.7560775, -2.4588132],
                    [6.016405, -3.9916434, -2.5753489],
                    [5.8762383, -4.095117, -2.6915278],
                    [5.441005, -3.7025, -2.6978788],
                    [3.8021955, -2.3089309, -2.2744963],
                    [3.295628, -1.7485684, -2.1460679],
                    [3.8095417, -2.1189125, -2.2619543],
                    [5.4892044, -3.5187688, -2.5719445],
                    [5.4801655, -3.616661, -2.614462],
                    [4.9412575, -3.1965845, -2.5532193],
                    [5.1379337, -3.4174705, -2.5731788],
                    [4.9215374, -3.290681, -2.5169702],
                    [4.978571, -3.3317158, -2.5741048],
                    [5.4809895, -3.7299604, -2.5985618],
                    [5.4321156, -3.5919714, -2.5068498],
                    [4.9712186, -3.3998384, -2.4638414],
                    [3.131559, -1.8154464, -2.0161948],
                    [4.20892, -2.32469, -2.24137],
                    [5.3603983, -3.5648031, -2.6062012],
                    [4.770118, -3.3103986, -2.570477],
                    [4.701253, -3.1281867, -2.5695343],
                    [5.692337, -3.640839, -2.4616065],
                    [5.45103, -3.6451797, -2.5184312],
                    [5.107309, -3.4940763, -2.478231],
                    [2.6783373, -1.4480876, -1.8975571],
                    [5.1807585, -3.3610148, -2.513155],
                    [5.0343246, -3.2504637, -2.3884437],
                    [5.273611, -3.5527153, -2.5969102],
                    [5.4621787, -3.6608934, -2.5238476],
                    [5.4608717, -3.5109582, -2.4960275],
                    [5.82248, -3.7629507, -2.517388],
                    [5.7347484, -3.8859196, -2.5711641],
                    [6.112766, -4.150079, -2.6801968],
                    [5.705344, -3.8973122, -2.7257922],
                    [4.6984296, -3.2733493, -2.5083308],
                    [4.3192806, -2.8144884, -2.431129],
                    [3.3805945, -1.8914232, -2.134581],
                    [5.3352375, -3.2841783, -2.4582448],
                    [5.7989273, -3.6409295, -2.5358305],
                    [5.648154, -3.3823075, -2.5451796],
                    [5.525385, -3.6856186, -2.5623384],
                    [5.047093, -3.3972507, -2.5808408],
                    [4.6922903, -3.1120577, -2.520347],
                    [4.454125, -2.7146144, -2.4370828],
                    [5.8160934, -3.7015703, -2.4822454],
                    [5.842537, -3.7719693, -2.5903497],
                    [5.584236, -3.6224103, -2.578228],
                    [4.6949444, -3.0575066, -2.4430642],
                    [3.7849636, -2.0093102, -2.2221537],
                    [5.34052, -3.4516811, -2.3648925],
                    [5.4426284, -3.7016723, -2.6079993],
                    [5.575471, -3.8038383, -2.6187627],
                    [5.374604, -3.4713042, -2.472371],
                    [5.573716, -3.7265248, -2.549485],
                    [4.758337, -3.2580361, -2.4734373],
                    [3.182425, -1.8679427, -2.1192076],
                    [5.5819745, -3.679071, -2.5723608],
                    [5.2793016, -3.4560566, -2.421187],
                    [5.5433426, -3.7827773, -2.6599064],
                    [5.5916505, -3.8679109, -2.5255156],
                    [5.497374, -3.498955, -2.525767],
                    [5.8535748, -3.5889792, -2.5111132],
                    [5.98721, -3.4372945, -2.3722787],
                    [5.8036013, -3.5048394, -2.530361],
                    [5.953143, -3.8283353, -2.7150617],
                    [6.1119184, -4.0932183, -2.832982],
                    [5.959545, -4.0726967, -2.8936415],
                    [5.6262956, -3.5740123, -2.5001867],
                    [5.802416, -3.625824, -2.6191945],
                    [6.1741114, -3.677545, -2.5701354],
                    [6.019506, -3.5576932, -2.555736],
                    [5.670724, -3.441112, -2.5689387],
                    [5.865163, -3.8021712, -2.7791395],
                    [6.131137, -4.057909, -2.8261504],
                    [5.7952104, -3.6973677, -2.644189],
                    [5.7676497, -3.6922674, -2.5299058],
                    [5.883764, -3.8301828, -2.5025594],
                    [5.574148, -3.6859841, -2.5446942],
                    [4.5494995, -3.0782628, -2.4074235],
                    [2.3880472, -1.2455968, -1.9546468],
                    [5.3021474, -3.4626734, -2.5357323],
                ]
            ],
            dtype=numpy.float32,
        ),
        label_ids=input_ids,
        metrics={"eval_loss": 3.2364680767059326},
        labels=["O", "LB_SEP", "LB_NS"],
        label_map={0: "O", 1: "LB_SEP", 2: "LB_NS"},
        tokenizer=[
            [
                "ラウンジ",
                "も",
                "気軽",
                "に",
                "利用",
                "でき",
                "、",
                "申し分",
                "ない",
                "です",
                "。",
                "▁",
                "ホテル",
                "内",
                "の",
                "部屋",
                "も",
                "ゆったり",
                "でき",
                "まし",
                "た",
                "。",
            ]
        ],
        subwords_lengths=[
            [
                1,
                1,
                2,
                1,
                1,
                1,
                1,
                1,
                2,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                1,
                1,
                1,
                1,
            ]
        ],
        subword_tokens=[
            "[CLS]",
            "ラウンジ",
            "も",
            "気",
            "##軽",
            "に",
            "利用",
            "でき",
            "、",
            "申し",
            "##分",
            "ない",
            "です",
            "。",
            "▁",
            "ホテル",
            "内",
            "の",
            "部屋",
            "も",
            "ゆ",
            "##ったり",
            "でき",
            "まし",
            "た",
            "。",
            "[SEP]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
            "[PAD]",
        ],
        model_type="distil_bert",
        dataset_content=[
            InputFeatures(
                input_ids=[
                    2,
                    4703,
                    693,
                    12,
                    5,
                    73,
                    1172,
                    28674,
                    10766,
                    7,
                    666,
                    15,
                    3913,
                    10,
                    8,
                    32000,
                    7052,
                    9,
                    8494,
                    832,
                    14,
                    16815,
                    6,
                    8567,
                    18178,
                    8342,
                    10,
                    2992,
                    8,
                    32000,
                    3,
                ]
                + [0] * 289,
                token_type_ids=None,
                label_ids=list(input_ids.tolist()),
                attention_mask=[1] * 31 + [0] * 289,
                document_id="0-1",
            )
        ],
    )

    return dummy_object


class TestPredictor(unittest.TestCase):
    def setUp(self) -> None:
        self.morph_annotator = MorphAnnotatorJanome()
        self.test_dataset_bert = [
            NewlineTestCase(
                text="ラウンジも気軽に利用でき、申し分ないです。▁ホテル内の部屋もゆったりできました。", return_value=func_generate_dummy_bert_prediction()
            )
        ]
        self.test_dataset_distil_bert = [
            NewlineTestCase(
                text="ラウンジも気軽に利用でき、申し分ないです。▁ホテル内の部屋もゆったりできました。",
                return_value=func_generate_dummy_distil_bert_prediction(),
            )
        ]

    def init_tokenized_layer(self, text: str) -> Annotations:
        annotations = Annotations()
        annotations.add_annotation_layer(
            "first",
            [
                SpanAnnotation(
                    rule_name=None, start_index=0, end_index=len(text), split_string_type=None, split_string_value=None
                )
            ],
        )
        res = self.morph_annotator.annotate(text, annotations)
        return res

    @staticmethod
    def reformat_data_structure(tokenized_layer: Annotations) -> typing.List[str]:
        tokens = []
        for s in tokenized_layer.get_annotation_layer("MorphAnnotatorJanome"):
            if s.args is None:
                continue
            if str(s.args["token"]) == "\n" or str(s.args["token"]) == "▁":
                tokens.append(METACHAR_LINE_BREAK)
            else:
                tokens.append(str(s.args["token"]))
        else:
            pass

        return tokens

    @staticmethod
    def check_all_prediction_point(original_sentence: typing.List[str], index_predicition: typing.List[int]):
        """予測された箇所が、改行であることを確認する。"""
        for t_index in index_predicition:
            assert (
                METACHAR_LINE_BREAK in original_sentence[t_index]
            ), f"The predicted point {t_index} is not line break."

    def test_run_predict(self):
        path_model = ""
        predictor_init = MagicMock()
        predictor_init.return_value = None

        for test_case in self.test_dataset_distil_bert:
            transformer_predictor_mock = MagicMock()
            transformer_predictor_mock.return_value = test_case.return_value.to_prediction_tuple()
            bunkai_predictor_mock_split_long_text = Mock(
                return_value=(test_case.return_value.tokenizer, test_case.return_value.subwords_lengths)
            )

            from typing import List

            from bunkai.algorithm.lbd.custom_tokenizers import VibratoSubwordsTokenizer
            from bunkai.third.utils_ner import InputExample

            # note: this function must be here because this function refers test_case objects.
            def func_dummy_convert_examples_to_features(
                examples: List[InputExample],
                label_list: List[str],
                max_seq_length: int,
                tokenizer: VibratoSubwordsTokenizer,
                cls_token_at_end=False,
                cls_token="[CLS]",
                cls_token_segment_id=1,
                sep_token="[SEP]",
                sep_token_extra=False,
                pad_on_left=False,
                pad_token=0,
                pad_token_segment_id=0,
                pad_token_label_id=-100,
                sequence_a_segment_id=0,
                mask_padding_with_zero=True,
                is_distil_bert: bool = False,
            ):
                return test_case.return_value.dataset_content

            # note: this function must be here because this function refers test_case objects.
            def convert_ids_to_tokens(ids: typing.Union[int, List[int]], skip_special_tokens: bool = False):
                """dummy method to generate subword-token-sequence from a sequence of token-id"""
                return test_case.return_value.subword_tokens

            with patch(
                "bunkai.algorithm.lbd.train.convert_examples_to_features",
                side_effect=func_dummy_convert_examples_to_features,
            ):
                with patch("bunkai.algorithm.lbd.predict.Predictor.__init__", predictor_init):
                    with patch(
                        "bunkai.algorithm.lbd.predict.Predictor._split_long_text", bunkai_predictor_mock_split_long_text
                    ):
                        predictor = bunkai.algorithm.lbd.predict.Predictor(modelpath=pathlib.Path(path_model))
                        predictor.labels = test_case.return_value.labels
                        predictor.label_map = test_case.return_value.label_map

                        predictor.bc = DummyBcObject()  # type: ignore
                        predictor.tokenizer = MagicMock()
                        predictor.tokenizer.side_effect = DummyJanomeSubwordsTokenizer()
                        predictor.tokenizer.convert_ids_to_tokens.side_effect = convert_ids_to_tokens
                        predictor.device = torch.device("cpu")

                        ret = type(
                            "Ret",
                            (object,),
                            {
                                "logits": type(
                                    "Ret2",
                                    (object,),
                                    {
                                        "to": lambda x: type(
                                            "Ret4",
                                            (object,),
                                            {
                                                "detach": type(
                                                    "Ret3",
                                                    (object,),
                                                    {
                                                        "numpy": lambda x: test_case.return_value.predictions,
                                                    },
                                                )
                                            },
                                        )
                                    },
                                )
                            },
                        )

                        class DummyModelDistilBert:
                            base_model_prefix = "distilbert"

                            def __call__(self, input_ids, attention_mask):
                                return ret

                        class DummyModelBert:
                            base_model_prefix = "bert"

                            def __call__(self, input_ids, attention_mask, token_type_ids):
                                return ret

                        if test_case.return_value.model_type == "bert":
                            predictor.model = DummyModelBert()  # type: ignore
                        elif test_case.return_value.model_type == "distil_bert":
                            predictor.model = DummyModelDistilBert()  # type: ignore
                        else:
                            raise Exception("unexpected case.")

                        tokenized_layer = self.init_tokenized_layer(test_case.text)
                        tokens = self.reformat_data_structure(tokenized_layer)
                        # check when return type is TokenIndex
                        res = list(predictor.predict([tokens]))
                        self.check_all_prediction_point(tokens, res[0])  # type: ignore


if __name__ == "__main__":
    unittest.main()
