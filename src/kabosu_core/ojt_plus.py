#The pyopenjtalk package is licensed under the MIT "Expat" License:
#
#> Copyright (c) 2018: Ryuichi Yamamoto.
#>
#> Permission is hereby granted, free of charge, to any person obtaining
#> a copy of this software and associated documentation files (the
#> "Software"), to deal in the Software without restriction, including
#> without limitation the rights to use, copy, modify, merge, publish,
#> distribute, sublicense, and/or sell copies of the Software, and to
#> permit persons to whom the Software is furnished to do so, subject to
#> the following conditions:
#>
#> The above copyright notice and this permission notice shall be
#> included in all copies or substantial portions of the Software.
#>
#> THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
#> EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
#> MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
#> IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
#> CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
#> TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
#> SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#/bAmFru).

from.hougen import convert_to_keihan_acc
from typing import Any, TypeVar, Union
from .types import NjdObject
from .utils import (
    merge_njd_marine_features,
    modify_acc_after_chaining,
    modify_kanji_yomi,
    process_odori_features,
    retreat_acc_nuc,
    modify_filler_accent,
    preserve_noun_accent,
    MULTI_READ_KANJI_LIST
)

from jpreprocess import JPreprocess

_global_marine = None



def load_marine_model(model_dir: Union[str, None] = None, dict_dir: Union[str, None] = None):
    global _global_marine
    if _global_marine is None:
        try:
            from marine.predict import Predictor
        except ImportError:
            raise ImportError("Please install marine by `pip install pyopenjtalk-plus[marine]`")
        _global_marine = Predictor(model_dir=model_dir, postprocess_vocab_dir=dict_dir)

def estimate_accent(njd_features: list[NjdObject]) -> list[NjdObject]:
    """Accent estimation using marine

    This function requires marine (https://github.com/6gsn/marine)

    Args:
        njd_result (list[NjdObject]): features generated by OpenJTalk.

    Returns:
        list[NjdObject]: features for NJDNode with estimation results by marine.
    """
    global _global_marine
    if _global_marine is None:
        load_marine_model()
        assert _global_marine is not None
    from marine.utils.openjtalk_util import convert_njd_feature_to_marine_feature

    marine_feature = convert_njd_feature_to_marine_feature(njd_features)
    marine_results = _global_marine.predict([marine_feature], require_open_jtalk_format=True)
    njd_features = merge_njd_marine_features(njd_features, marine_results)
    return njd_features

def apply_postprocessing(
    text: str,
    njd_features: list[NjdObject],
    run_marine: bool = False,
    use_vanilla: bool = False,
    jpreprocess: Union[JPreprocess, None] = None,
    keihan: bool = False
) -> list[NjdObject]:
    """Apply postprocessing to raw NJD features

    Args:
        text (str): Unicode Japanese text.
        njd_features (list[NJDFeature]): features for NJDNode.
        run_marine (bool): Whether to estimate accent using marine.
          Default is False. If you want to activate this option, you need to install marine
          by `pip install pyopenjtalk-plus[marine]`
        use_vanilla (bool): If True, returns the vanilla NJDFeature list.
          Default is False.
        kabosu (Kabosu, optional): Kabosu instance to use. If None, use global instance.
          Default is None.

    Returns:
        list[NJDFeature]: features for NJDNode after postprocessing.
    """
    if run_marine:
        pred_njd_features = estimate_accent(njd_features)
        njd_features = preserve_noun_accent(njd_features, pred_njd_features)
    if use_vanilla is False:
        njd_features = modify_filler_accent(njd_features)
        njd_features = modify_kanji_yomi(text, njd_features, MULTI_READ_KANJI_LIST)
        njd_features = retreat_acc_nuc(njd_features)
        njd_features = modify_acc_after_chaining(njd_features)
        njd_features = process_odori_features(njd_features, jpreprocess=jpreprocess)
    if keihan:
        njd_features = convert_to_keihan_acc(njd_features)

    return njd_features